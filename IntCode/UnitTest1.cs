using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace IntCode
{
    public class Tests
    {
        [Test]
        public void Add()
        {
            var program = new Program("1,10,20,30");
            program.Step();
            Assert.AreEqual(program.n[10] + program.n[20], program.n[30]);
        }

        [Test]
        public void FullProgram()
        {
            var program = new Program("1,9,10,3,2,3,11,0,99,30,40,50");
            program.Step();
            var expected = new Program("1,9,10,70,2, 3, 11, 0,99,30, 40, 50");
            Assert.AreEqual(program.n, expected.n);
            program.Step();
            Assert.AreEqual(3500, program.n[0]);
        }
        [Test]
        public void FullProgramRun()
        {
            var program = new Program("1,9,10,3,2,3,11,0,99,30,40,50");
            program.Run();
            Assert.AreEqual(3500, program.n[0]);
        }

        [Test]
        public void Puzzle2Part1()
        {
            var program = new Program("1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,19,1,19,5,23,1,23,5,27,2,27,10,31,1,31,9,35,1,35,5,39,1,6,39,43,2,9,43,47,1,5,47,51,2,6,51,55,1,5,55,59,2,10,59,63,1,63,6,67,2,67,6,71,2,10,71,75,1,6,75,79,2,79,9,83,1,83,5,87,1,87,9,91,1,91,9,95,1,10,95,99,1,99,13,103,2,6,103,107,1,107,5,111,1,6,111,115,1,9,115,119,1,119,9,123,2,123,10,127,1,6,127,131,2,131,13,135,1,13,135,139,1,9,139,143,1,9,143,147,1,147,13,151,1,151,9,155,1,155,13,159,1,6,159,163,1,13,163,167,1,2,167,171,1,171,13,0,99,2,0,14,0");
            program.n[1] = 12;
            program.n[2] = 2;
            program.Run();
            Assert.AreEqual(3654868, program.n[0]);
        }
        [Test]
        public void Puzzle2Part2()
        {
            var program = new Program("1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,19,1,19,5,23,1,23,5,27,2,27,10,31,1,31,9,35,1,35,5,39,1,6,39,43,2,9,43,47,1,5,47,51,2,6,51,55,1,5,55,59,2,10,59,63,1,63,6,67,2,67,6,71,2,10,71,75,1,6,75,79,2,79,9,83,1,83,5,87,1,87,9,91,1,91,9,95,1,10,95,99,1,99,13,103,2,6,103,107,1,107,5,111,1,6,111,115,1,9,115,119,1,119,9,123,2,123,10,127,1,6,127,131,2,131,13,135,1,13,135,139,1,9,139,143,1,9,143,147,1,147,13,151,1,151,9,155,1,155,13,159,1,6,159,163,1,13,163,167,1,2,167,171,1,171,13,0,99,2,0,14,0");
            program.n[1] = 70;
            program.n[2] = 14;
            program.Run();
            Assert.AreEqual(19690720, program.n[0]);
        }
        [Test]
        public void ModeImmediate()
        {
            var program = new Program("1002,4,3,4,33");
            program.Run();
            Assert.AreEqual(99, program.n[4]);
        }
        [Test]
        public void ModeImmediateNegative()
        {
            var program = new Program("1101,100,-1,4,0");
            program.Run();
            Assert.AreEqual(99, program.n[4]);
        }

        [Test]
        public void Puzzle5Part1()
        {
            List<long> inputs = new List<long>() { 1 };
            List<long> results = new List<long>();
            void output(long x) => results.Add(x);

            var program = new Program("3,225,1,225,6,6,1100,1,238,225,104,0,1101,81,30,225,1102,9,63,225,1001,92,45,224,101,-83,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1102,41,38,225,1002,165,73,224,101,-2920,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,18,14,224,1001,224,-32,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1101,67,38,225,1102,54,62,224,1001,224,-3348,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,1,161,169,224,101,-62,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,2,14,18,224,1001,224,-1890,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,1101,20,25,225,1102,40,11,225,1102,42,58,225,101,76,217,224,101,-153,224,224,4,224,102,8,223,223,1001,224,5,224,1,224,223,223,102,11,43,224,1001,224,-451,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1102,77,23,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,7,226,226,224,102,2,223,223,1006,224,344,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,374,101,1,223,223,1008,677,226,224,1002,223,2,223,1005,224,389,101,1,223,223,1007,677,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,419,1001,223,1,223,108,677,226,224,102,2,223,223,1006,224,434,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,449,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,464,101,1,223,223,107,677,226,224,102,2,223,223,1006,224,479,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,509,101,1,223,223,7,677,226,224,1002,223,2,223,1006,224,524,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,539,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,554,101,1,223,223,1008,677,677,224,102,2,223,223,1006,224,569,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,599,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,614,1001,223,1,223,1107,677,677,224,1002,223,2,223,1005,224,629,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,644,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226"
                , inputs, output);
            program.Run();

            Assert.AreEqual(5346030, results.TakeLast(1).First());
        }

        [Test]
        public void Puzzle5Part2()
        {
            List<long> inputs = new List<long>() { 5 };
            List<long> results = new List<long>();
            void output(long x) => results.Add(x);

            var program = new Program("3,225,1,225,6,6,1100,1,238,225,104,0,1101,81,30,225,1102,9,63,225,1001,92,45,224,101,-83,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1102,41,38,225,1002,165,73,224,101,-2920,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,18,14,224,1001,224,-32,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1101,67,38,225,1102,54,62,224,1001,224,-3348,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,1,161,169,224,101,-62,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,2,14,18,224,1001,224,-1890,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,1101,20,25,225,1102,40,11,225,1102,42,58,225,101,76,217,224,101,-153,224,224,4,224,102,8,223,223,1001,224,5,224,1,224,223,223,102,11,43,224,1001,224,-451,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1102,77,23,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,7,226,226,224,102,2,223,223,1006,224,344,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,374,101,1,223,223,1008,677,226,224,1002,223,2,223,1005,224,389,101,1,223,223,1007,677,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,419,1001,223,1,223,108,677,226,224,102,2,223,223,1006,224,434,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,449,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,464,101,1,223,223,107,677,226,224,102,2,223,223,1006,224,479,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,509,101,1,223,223,7,677,226,224,1002,223,2,223,1006,224,524,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,539,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,554,101,1,223,223,1008,677,677,224,102,2,223,223,1006,224,569,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,599,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,614,1001,223,1,223,1107,677,677,224,1002,223,2,223,1005,224,629,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,644,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226"
                , inputs, output);
            program.Run();

            Assert.AreEqual(513116, results.TakeLast(1).First());
        }

        private static void OutputConsole(int x) => Console.WriteLine(x);

        [Test]
        public void CompareTo8()
        {
            var code = "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99";
            var less = new List<long>() { 7 };
            var equal = new List<long>() { 8 };
            var greater = new List<long>() { 9 };

            RunProgram(code, less, 999);
            RunProgram(code, equal, 1000);
            RunProgram(code, greater, 1001);

            static void RunProgram(string code, List<long> input, long expected)
            {
                List<long> results = new List<long>();
                void output(long x) => results.Add(x);

                var program = new Program(code, input, output);
                program.Run();
                Assert.AreEqual(expected, results[0]);
            }

        }

        [Test]
        public void AmplifyerExample43210()
        {
            var code = "3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0";
            var expected = 43210;
            var phaseSettings = new List<int>() { 4, 3, 2, 1, 0 };

            long res = RunAmplifyersOneShot(code, phaseSettings);

            Assert.AreEqual(expected, res);
        }

        [Test]
        public void AmplifyerExample65210()
        {
            var code = "3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0";
            var expected = 65210;
            var phaseSettings = new List<int>() { 1, 0, 4, 3, 2 };

            long res = RunAmplifyersOneShot(code, phaseSettings);

            Assert.AreEqual(expected, res);
        }

        [Test]
        public void Puzzle7Part1()
        {
            var code = "3,8,1001,8,10,8,105,1,0,0,21,30,47,60,81,102,183,264,345,426,99999,3,9,1002,9,5,9,4,9,99,3,9,1002,9,5,9,1001,9,4,9,1002,9,4,9,4,9,99,3,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,1001,9,3,9,1002,9,2,9,101,5,9,9,1002,9,2,9,4,9,99,3,9,102,4,9,9,101,4,9,9,1002,9,3,9,101,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,99";
            var expected = 116680;

            long res = MaxPhase(code, 0, false);

            Assert.AreEqual(expected, res);
        }

        [Test]
        public void Puzzle7Part2()
        {
            var code = "3,8,1001,8,10,8,105,1,0,0,21,30,47,60,81,102,183,264,345,426,99999,3,9,1002,9,5,9,4,9,99,3,9,1002,9,5,9,1001,9,4,9,1002,9,4,9,4,9,99,3,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,1001,9,3,9,1002,9,2,9,101,5,9,9,1002,9,2,9,4,9,99,3,9,102,4,9,9,101,4,9,9,1002,9,3,9,101,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,99";
            var expected = 89603079;

            long res = MaxPhase(code, 5, true);
            Assert.AreEqual(expected, res);
        }
        static IEnumerable<IEnumerable<T>> GetPermutations<T>(IEnumerable<T> list, int length)
        {
            if (length == 1) return list.Select(t => new T[] { t });

            return GetPermutations(list, length - 1)
                .SelectMany(t => list.Where(e => !t.Contains(e)),
                    (t1, t2) => t1.Concat(new T[] { t2 }));
        }

        private long MaxPhase(string code, int minPhase, bool looping)
        {
            var settings = GetPermutations(Enumerable.Range(minPhase, 5), 5);

            List<long> power = new List<long>();
            foreach (var s in settings)
            {
                long res;
                if (!looping) res = RunAmplifyersOneShot(code, s.ToList());
                else res = RunAmplifyersFeedbackLoop(code, s.ToList());
                power.Add(res);
            }

            return power.Max();
        }

        private static long RunAmplifyersOneShot(string code, List<int> phaseSettings)
        {
            List<Program> amplifyers = SetUpAllButLastAmplifyer(code, phaseSettings);

            var endAmplifyer = amplifyers.Last();
            long res = 0;
            endAmplifyer.output = (x) => res = x;

            foreach (var amp in amplifyers) amp.Run();
            return res;
        }
        private static long RunAmplifyersFeedbackLoop(string code, List<int> phaseSettings)
        {
            List<Program> amplifyers = SetUpAllButLastAmplifyer(code, phaseSettings);

            var endAmplifyer = amplifyers.Last();
            var firstAmplifyer = amplifyers.First();
            endAmplifyer.output = (x) => firstAmplifyer.AddInput(new List<long>() { x });

            while (true)
                foreach (var amp in amplifyers)
                {
                    if (!amp.halted)
                        amp.Run();
                    else return firstAmplifyer.Input.Peek();
                }
            throw new Exception("Expected to quit in the loop");
        }
        private static List<Program> SetUpAllButLastAmplifyer(string code, List<int> phaseSettings)
        {
            var amplifyers = new List<Program>();

            foreach (var setting in phaseSettings)
                amplifyers.Add(new Program(code, new List<long>() { setting }, null));

            for (int i = 0; i < amplifyers.Count - 1; i++)
            {
                var next = amplifyers[i + 1];
                void p(long x) => next.AddInput(new List<long>() { x });
                amplifyers[i].output = p;
            }

            var beginAmplifyer = amplifyers.First();
            beginAmplifyer.AddInput(new List<long>() { 0 });
            return amplifyers;
        }
        [Test]
        public void LargeNumber()
        {
            var code = "104,1125899906842624,99";
            var expected = 1125899906842624;

            long res = 0;

            var p = new Program(code, new List<long>(), (x) => res = x);
            p.Run();
            Assert.AreEqual(expected, res);
        }
        [Test]
        public void Quine()
        {
            var code = "109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99";
            var expected = code;

            List<string> res = new List<string>();

            var p = new Program(code, new List<long>(), (x) => res.Add(x.ToString()));
            p.Run();
            Assert.AreEqual(expected, string.Join(',', res));
        }
        [Test]
        public void Puzzle9Part1()
        {
            List<long> inputs = new List<long>() { 1 };
            List<long> results = new List<long>();
            void output(long x) => results.Add(x);

            var program = new Program("1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,0,396,1029,1101,0,356,1023,1101,401,0,1028,1101,24,0,1008,1101,33,0,1019,1101,35,0,1010,1102,359,1,1022,1102,32,1,1001,1101,37,0,1004,1101,0,31,1009,1101,0,30,1003,1101,28,0,1002,1102,1,36,1014,1102,20,1,1012,1101,21,0,1000,1101,0,22,1015,1102,23,1,1013,1102,1,1,1021,1102,1,39,1007,1102,26,1,1017,1101,0,38,1016,1101,0,437,1024,1102,432,1,1025,1101,0,421,1026,1101,0,29,1005,1101,27,0,1011,1102,1,0,1020,1101,0,25,1018,1101,0,414,1027,1102,34,1,1006,109,6,2108,33,-3,63,1005,63,201,1001,64,1,64,1105,1,203,4,187,1002,64,2,64,109,14,21108,40,40,-6,1005,1014,221,4,209,1105,1,225,1001,64,1,64,1002,64,2,64,109,-21,2102,1,3,63,1008,63,28,63,1005,63,251,4,231,1001,64,1,64,1106,0,251,1002,64,2,64,109,12,2101,0,-3,63,1008,63,21,63,1005,63,275,1001,64,1,64,1105,1,277,4,257,1002,64,2,64,109,-10,1207,1,27,63,1005,63,293,1105,1,299,4,283,1001,64,1,64,1002,64,2,64,109,9,21108,41,42,3,1005,1013,315,1105,1,321,4,305,1001,64,1,64,1002,64,2,64,109,-12,1202,6,1,63,1008,63,37,63,1005,63,347,4,327,1001,64,1,64,1105,1,347,1002,64,2,64,109,29,2105,1,-4,1105,1,365,4,353,1001,64,1,64,1002,64,2,64,109,-17,2108,32,-9,63,1005,63,387,4,371,1001,64,1,64,1105,1,387,1002,64,2,64,109,17,2106,0,1,4,393,1105,1,405,1001,64,1,64,1002,64,2,64,109,1,2106,0,-1,1001,64,1,64,1106,0,423,4,411,1002,64,2,64,109,-13,2105,1,9,4,429,1106,0,441,1001,64,1,64,1002,64,2,64,109,3,21107,42,41,-1,1005,1017,461,1001,64,1,64,1106,0,463,4,447,1002,64,2,64,109,-4,21107,43,44,1,1005,1015,481,4,469,1106,0,485,1001,64,1,64,1002,64,2,64,109,-6,21101,44,0,6,1008,1014,47,63,1005,63,505,1106,0,511,4,491,1001,64,1,64,1002,64,2,64,109,-6,1208,-1,32,63,1005,63,529,4,517,1105,1,533,1001,64,1,64,1002,64,2,64,109,11,1205,7,545,1106,0,551,4,539,1001,64,1,64,1002,64,2,64,109,11,21102,45,1,-7,1008,1017,48,63,1005,63,575,1001,64,1,64,1106,0,577,4,557,1002,64,2,64,109,-8,1206,5,593,1001,64,1,64,1105,1,595,4,583,1002,64,2,64,109,7,1206,-3,609,4,601,1106,0,613,1001,64,1,64,1002,64,2,64,109,-10,2101,0,-6,63,1008,63,39,63,1005,63,635,4,619,1106,0,639,1001,64,1,64,1002,64,2,64,109,-9,1208,0,39,63,1005,63,655,1106,0,661,4,645,1001,64,1,64,1002,64,2,64,109,4,2107,25,0,63,1005,63,681,1001,64,1,64,1105,1,683,4,667,1002,64,2,64,109,-5,2107,31,-2,63,1005,63,701,4,689,1106,0,705,1001,64,1,64,1002,64,2,64,109,19,1205,-1,719,4,711,1105,1,723,1001,64,1,64,1002,64,2,64,109,-17,1201,3,0,63,1008,63,24,63,1005,63,745,4,729,1106,0,749,1001,64,1,64,1002,64,2,64,109,13,21102,46,1,-3,1008,1015,46,63,1005,63,771,4,755,1105,1,775,1001,64,1,64,1002,64,2,64,109,-13,1207,4,32,63,1005,63,793,4,781,1106,0,797,1001,64,1,64,1002,64,2,64,109,7,2102,1,-9,63,1008,63,27,63,1005,63,821,1001,64,1,64,1105,1,823,4,803,1002,64,2,64,109,-18,1201,8,0,63,1008,63,25,63,1005,63,847,1001,64,1,64,1106,0,849,4,829,1002,64,2,64,109,23,21101,47,0,2,1008,1019,47,63,1005,63,871,4,855,1106,0,875,1001,64,1,64,1002,64,2,64,109,-22,1202,5,1,63,1008,63,19,63,1005,63,899,1001,64,1,64,1106,0,901,4,881,4,64,99,21102,27,1,1,21102,1,915,0,1105,1,922,21201,1,25165,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21102,942,1,0,1105,1,922,22102,1,1,-1,21201,-2,-3,1,21101,0,957,0,1105,1,922,22201,1,-1,-2,1106,0,968,21201,-2,0,-2,109,-3,2105,1,0", inputs, output);
            program.Run();

            Assert.AreEqual(3497884671L, results.Last());
        }

        [Test]
        public void Puzzle9Part2()
        {
            List<long> inputs = new List<long>() { 2 };
            List<long> results = new List<long>();
            void output(long x) => results.Add(x);

            var program = new Program("1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,0,396,1029,1101,0,356,1023,1101,401,0,1028,1101,24,0,1008,1101,33,0,1019,1101,35,0,1010,1102,359,1,1022,1102,32,1,1001,1101,37,0,1004,1101,0,31,1009,1101,0,30,1003,1101,28,0,1002,1102,1,36,1014,1102,20,1,1012,1101,21,0,1000,1101,0,22,1015,1102,23,1,1013,1102,1,1,1021,1102,1,39,1007,1102,26,1,1017,1101,0,38,1016,1101,0,437,1024,1102,432,1,1025,1101,0,421,1026,1101,0,29,1005,1101,27,0,1011,1102,1,0,1020,1101,0,25,1018,1101,0,414,1027,1102,34,1,1006,109,6,2108,33,-3,63,1005,63,201,1001,64,1,64,1105,1,203,4,187,1002,64,2,64,109,14,21108,40,40,-6,1005,1014,221,4,209,1105,1,225,1001,64,1,64,1002,64,2,64,109,-21,2102,1,3,63,1008,63,28,63,1005,63,251,4,231,1001,64,1,64,1106,0,251,1002,64,2,64,109,12,2101,0,-3,63,1008,63,21,63,1005,63,275,1001,64,1,64,1105,1,277,4,257,1002,64,2,64,109,-10,1207,1,27,63,1005,63,293,1105,1,299,4,283,1001,64,1,64,1002,64,2,64,109,9,21108,41,42,3,1005,1013,315,1105,1,321,4,305,1001,64,1,64,1002,64,2,64,109,-12,1202,6,1,63,1008,63,37,63,1005,63,347,4,327,1001,64,1,64,1105,1,347,1002,64,2,64,109,29,2105,1,-4,1105,1,365,4,353,1001,64,1,64,1002,64,2,64,109,-17,2108,32,-9,63,1005,63,387,4,371,1001,64,1,64,1105,1,387,1002,64,2,64,109,17,2106,0,1,4,393,1105,1,405,1001,64,1,64,1002,64,2,64,109,1,2106,0,-1,1001,64,1,64,1106,0,423,4,411,1002,64,2,64,109,-13,2105,1,9,4,429,1106,0,441,1001,64,1,64,1002,64,2,64,109,3,21107,42,41,-1,1005,1017,461,1001,64,1,64,1106,0,463,4,447,1002,64,2,64,109,-4,21107,43,44,1,1005,1015,481,4,469,1106,0,485,1001,64,1,64,1002,64,2,64,109,-6,21101,44,0,6,1008,1014,47,63,1005,63,505,1106,0,511,4,491,1001,64,1,64,1002,64,2,64,109,-6,1208,-1,32,63,1005,63,529,4,517,1105,1,533,1001,64,1,64,1002,64,2,64,109,11,1205,7,545,1106,0,551,4,539,1001,64,1,64,1002,64,2,64,109,11,21102,45,1,-7,1008,1017,48,63,1005,63,575,1001,64,1,64,1106,0,577,4,557,1002,64,2,64,109,-8,1206,5,593,1001,64,1,64,1105,1,595,4,583,1002,64,2,64,109,7,1206,-3,609,4,601,1106,0,613,1001,64,1,64,1002,64,2,64,109,-10,2101,0,-6,63,1008,63,39,63,1005,63,635,4,619,1106,0,639,1001,64,1,64,1002,64,2,64,109,-9,1208,0,39,63,1005,63,655,1106,0,661,4,645,1001,64,1,64,1002,64,2,64,109,4,2107,25,0,63,1005,63,681,1001,64,1,64,1105,1,683,4,667,1002,64,2,64,109,-5,2107,31,-2,63,1005,63,701,4,689,1106,0,705,1001,64,1,64,1002,64,2,64,109,19,1205,-1,719,4,711,1105,1,723,1001,64,1,64,1002,64,2,64,109,-17,1201,3,0,63,1008,63,24,63,1005,63,745,4,729,1106,0,749,1001,64,1,64,1002,64,2,64,109,13,21102,46,1,-3,1008,1015,46,63,1005,63,771,4,755,1105,1,775,1001,64,1,64,1002,64,2,64,109,-13,1207,4,32,63,1005,63,793,4,781,1106,0,797,1001,64,1,64,1002,64,2,64,109,7,2102,1,-9,63,1008,63,27,63,1005,63,821,1001,64,1,64,1105,1,823,4,803,1002,64,2,64,109,-18,1201,8,0,63,1008,63,25,63,1005,63,847,1001,64,1,64,1106,0,849,4,829,1002,64,2,64,109,23,21101,47,0,2,1008,1019,47,63,1005,63,871,4,855,1106,0,875,1001,64,1,64,1002,64,2,64,109,-22,1202,5,1,63,1008,63,19,63,1005,63,899,1001,64,1,64,1106,0,901,4,881,4,64,99,21102,27,1,1,21102,1,915,0,1105,1,922,21201,1,25165,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21102,942,1,0,1105,1,922,22102,1,1,-1,21201,-2,-3,1,21101,0,957,0,1105,1,922,22201,1,-1,-2,1106,0,968,21201,-2,0,-2,109,-3,2105,1,0", inputs, output);
            program.Run();

            Assert.AreEqual(46470, results.Last());
        }

        [Test]
        public void Puzzle11Part1()
        {
            var program = new Program("3,8,1005,8,334,1106,0,11,0,0,0,104,1,104,0,3,8,102,-1,8,10,101,1,10,10,4,10,108,0,8,10,4,10,1002,8,1,28,2,1108,5,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,1,10,4,10,1001,8,0,55,1,102,18,10,1,2,5,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,1,8,10,4,10,1001,8,0,84,1,106,11,10,2,1008,6,10,1,4,4,10,1006,0,55,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,102,1,8,121,1,107,9,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,147,2,1002,4,10,2,104,18,10,1,107,16,10,1,108,8,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,0,8,10,4,10,102,1,8,185,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,0,10,4,10,101,0,8,208,2,1009,16,10,1006,0,7,1006,0,18,1,1105,8,10,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,243,2,1105,20,10,2,106,10,10,1006,0,67,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,1001,8,0,276,2,1103,5,10,2,1104,7,10,1006,0,35,2,1105,3,10,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,1,10,4,10,1002,8,1,314,101,1,9,9,1007,9,1097,10,1005,10,15,99,109,656,104,0,104,1,21102,936995824532,1,1,21101,0,351,0,1105,1,455,21102,1,387508445964,1,21102,362,1,0,1106,0,455,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21102,1,235244973059,1,21101,409,0,0,1106,0,455,21102,179410541659,1,1,21101,0,420,0,1105,1,455,3,10,104,0,104,0,3,10,104,0,104,0,21101,868402070292,0,1,21102,1,443,0,1106,0,455,21102,1,709584749324,1,21102,454,1,0,1106,0,455,99,109,2,22102,1,-1,1,21101,40,0,2,21102,486,1,3,21101,0,476,0,1106,0,519,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,481,482,497,4,0,1001,481,1,481,108,4,481,10,1006,10,513,1101,0,0,481,109,-2,2106,0,0,0,109,4,2102,1,-1,518,1207,-3,0,10,1006,10,536,21102,0,1,-3,21202,-3,1,1,22102,1,-2,2,21102,1,1,3,21102,555,1,0,1106,0,560,109,-4,2106,0,0,109,5,1207,-3,1,10,1006,10,583,2207,-4,-2,10,1006,10,583,21201,-4,0,-4,1106,0,651,21201,-4,0,1,21201,-3,-1,2,21202,-2,2,3,21102,602,1,0,1106,0,560,22102,1,1,-4,21101,0,1,-1,2207,-4,-2,10,1006,10,621,21102,0,1,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,643,21201,-1,0,1,21102,643,1,0,106,0,518,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2106,0,0");
            program.AddInput(new List<long>() { 0 });
            var painter = new Painter(program);
            while (!painter.Done) painter.Run();
            Assert.IsTrue(painter.Done);
            Assert.AreEqual(2016, painter.WhiteTileCount);
        }
        [Test]
        public void Puzzle11Part2()
        {
            var program = new Program("3,8,1005,8,334,1106,0,11,0,0,0,104,1,104,0,3,8,102,-1,8,10,101,1,10,10,4,10,108,0,8,10,4,10,1002,8,1,28,2,1108,5,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,1,10,4,10,1001,8,0,55,1,102,18,10,1,2,5,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,1,8,10,4,10,1001,8,0,84,1,106,11,10,2,1008,6,10,1,4,4,10,1006,0,55,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,102,1,8,121,1,107,9,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,147,2,1002,4,10,2,104,18,10,1,107,16,10,1,108,8,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,0,8,10,4,10,102,1,8,185,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,0,10,4,10,101,0,8,208,2,1009,16,10,1006,0,7,1006,0,18,1,1105,8,10,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,243,2,1105,20,10,2,106,10,10,1006,0,67,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,1001,8,0,276,2,1103,5,10,2,1104,7,10,1006,0,35,2,1105,3,10,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,1,10,4,10,1002,8,1,314,101,1,9,9,1007,9,1097,10,1005,10,15,99,109,656,104,0,104,1,21102,936995824532,1,1,21101,0,351,0,1105,1,455,21102,1,387508445964,1,21102,362,1,0,1106,0,455,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21102,1,235244973059,1,21101,409,0,0,1106,0,455,21102,179410541659,1,1,21101,0,420,0,1105,1,455,3,10,104,0,104,0,3,10,104,0,104,0,21101,868402070292,0,1,21102,1,443,0,1106,0,455,21102,1,709584749324,1,21102,454,1,0,1106,0,455,99,109,2,22102,1,-1,1,21101,40,0,2,21102,486,1,3,21101,0,476,0,1106,0,519,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,481,482,497,4,0,1001,481,1,481,108,4,481,10,1006,10,513,1101,0,0,481,109,-2,2106,0,0,0,109,4,2102,1,-1,518,1207,-3,0,10,1006,10,536,21102,0,1,-3,21202,-3,1,1,22102,1,-2,2,21102,1,1,3,21102,555,1,0,1106,0,560,109,-4,2106,0,0,109,5,1207,-3,1,10,1006,10,583,2207,-4,-2,10,1006,10,583,21201,-4,0,-4,1106,0,651,21201,-4,0,1,21201,-3,-1,2,21202,-2,2,3,21102,602,1,0,1106,0,560,22102,1,1,-4,21101,0,1,-1,2207,-4,-2,10,1006,10,621,21102,0,1,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,643,21201,-1,0,1,21102,643,1,0,106,0,518,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2106,0,0");
            program.AddInput(new List<long>() { 1 });
            var painter = new Painter(program);
            while (!painter.Done) painter.Run();
            Assert.IsTrue(painter.Done);

            painter.Draw();
        }

        [Test]
        public void Puzzle13Part1()
        {
            var code = "1,380,379,385,1008,2823,432584,381,1005,381,12,99,109,2824,1101,0,0,383,1101,0,0,382,20102,1,382,1,20102,1,383,2,21102,1,37,0,1105,1,578,4,382,4,383,204,1,1001,382,1,382,1007,382,42,381,1005,381,22,1001,383,1,383,1007,383,26,381,1005,381,18,1006,385,69,99,104,-1,104,0,4,386,3,384,1007,384,0,381,1005,381,94,107,0,384,381,1005,381,108,1105,1,161,107,1,392,381,1006,381,161,1101,-1,0,384,1105,1,119,1007,392,40,381,1006,381,161,1101,0,1,384,21002,392,1,1,21102,24,1,2,21102,0,1,3,21102,138,1,0,1105,1,549,1,392,384,392,20102,1,392,1,21101,0,24,2,21101,0,3,3,21101,161,0,0,1105,1,549,1101,0,0,384,20001,388,390,1,20101,0,389,2,21101,0,180,0,1106,0,578,1206,1,213,1208,1,2,381,1006,381,205,20001,388,390,1,21002,389,1,2,21101,0,205,0,1106,0,393,1002,390,-1,390,1101,1,0,384,20102,1,388,1,20001,389,391,2,21102,1,228,0,1105,1,578,1206,1,261,1208,1,2,381,1006,381,253,21001,388,0,1,20001,389,391,2,21101,253,0,0,1106,0,393,1002,391,-1,391,1102,1,1,384,1005,384,161,20001,388,390,1,20001,389,391,2,21102,1,279,0,1105,1,578,1206,1,316,1208,1,2,381,1006,381,304,20001,388,390,1,20001,389,391,2,21102,1,304,0,1106,0,393,1002,390,-1,390,1002,391,-1,391,1102,1,1,384,1005,384,161,21001,388,0,1,21002,389,1,2,21101,0,0,3,21101,0,338,0,1106,0,549,1,388,390,388,1,389,391,389,21002,388,1,1,20102,1,389,2,21101,4,0,3,21102,1,365,0,1106,0,549,1007,389,25,381,1005,381,75,104,-1,104,0,104,0,99,0,1,0,0,0,0,0,0,380,19,21,1,1,21,109,3,22102,1,-2,1,21201,-1,0,2,21102,1,0,3,21101,0,414,0,1105,1,549,21201,-2,0,1,21202,-1,1,2,21102,1,429,0,1105,1,601,1202,1,1,435,1,386,0,386,104,-1,104,0,4,386,1001,387,-1,387,1005,387,451,99,109,-3,2105,1,0,109,8,22202,-7,-6,-3,22201,-3,-5,-3,21202,-4,64,-2,2207,-3,-2,381,1005,381,492,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,481,21202,-4,8,-2,2207,-3,-2,381,1005,381,518,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,507,2207,-3,-4,381,1005,381,540,21202,-4,-1,-1,22201,-3,-1,-3,2207,-3,-4,381,1006,381,529,22102,1,-3,-7,109,-8,2105,1,0,109,4,1202,-2,42,566,201,-3,566,566,101,639,566,566,2102,1,-1,0,204,-3,204,-2,204,-1,109,-4,2105,1,0,109,3,1202,-1,42,594,201,-2,594,594,101,639,594,594,20102,1,0,-2,109,-3,2105,1,0,109,3,22102,26,-2,1,22201,1,-1,1,21101,557,0,2,21102,671,1,3,21101,0,1092,4,21101,630,0,0,1105,1,456,21201,1,1731,-2,109,-3,2106,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,2,0,0,2,0,0,0,0,0,2,2,2,0,2,2,2,0,0,2,0,0,0,0,0,2,0,2,0,0,2,2,0,2,2,2,0,0,1,1,0,0,2,2,2,0,0,2,0,2,2,2,2,0,0,2,2,0,2,2,2,2,0,0,0,0,2,0,2,0,2,2,2,2,0,2,0,0,0,0,1,1,0,0,2,2,2,2,0,2,0,2,2,2,0,2,0,0,0,2,0,0,2,2,2,2,2,0,2,0,0,0,2,2,0,0,2,2,2,2,2,0,1,1,0,0,2,2,0,0,0,2,0,2,2,2,2,0,0,0,2,0,0,2,2,2,0,0,2,0,0,0,2,2,2,0,2,0,0,0,2,0,2,0,1,1,0,2,0,0,2,2,2,0,2,2,0,2,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,2,2,0,2,2,0,0,2,2,2,2,2,0,1,1,0,2,0,2,2,2,2,0,2,0,2,0,2,2,0,2,0,2,0,2,2,2,2,0,0,0,2,2,2,2,2,0,0,2,0,0,0,2,0,0,1,1,0,2,0,2,2,2,2,0,2,2,0,2,2,2,2,2,0,2,2,2,2,0,2,2,0,2,0,2,2,2,0,2,2,2,0,2,0,0,0,0,1,1,0,2,0,2,2,2,2,2,2,2,2,0,0,2,0,0,2,2,2,2,2,0,0,0,2,0,2,0,2,2,0,2,2,0,0,0,2,2,2,0,1,1,0,2,0,0,0,0,2,0,0,2,0,2,0,2,0,0,2,2,2,2,2,0,2,0,0,2,0,2,0,2,2,0,0,2,2,0,0,2,0,0,1,1,0,0,2,0,0,0,2,2,0,0,0,0,2,2,0,0,0,2,2,0,2,0,0,2,2,0,2,2,0,0,2,0,2,2,2,0,0,2,2,0,1,1,0,2,2,2,0,0,2,0,2,2,0,0,2,2,2,2,2,0,2,2,0,2,2,2,2,2,0,2,0,0,2,0,2,0,2,0,2,2,2,0,1,1,0,0,2,0,2,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,0,2,2,0,2,0,2,2,2,2,0,0,0,0,2,2,0,2,2,0,1,1,0,0,0,2,0,2,2,2,2,2,2,0,2,2,0,0,0,2,0,2,2,0,2,2,2,2,0,2,0,2,0,0,2,0,0,2,2,2,2,0,1,1,0,0,0,2,2,0,2,2,0,2,2,0,0,2,0,2,0,0,2,0,2,0,0,2,0,0,2,0,2,2,2,0,2,2,2,2,0,0,2,0,1,1,0,0,0,2,2,0,2,2,2,0,2,2,0,0,2,0,0,2,2,2,0,0,0,2,0,0,2,0,2,0,0,2,0,2,2,2,0,0,0,0,1,1,0,0,2,0,2,0,2,0,0,2,2,2,0,2,2,2,2,0,2,2,0,2,2,0,0,0,0,2,0,0,2,2,2,0,0,0,2,2,2,0,1,1,0,2,2,0,2,2,0,0,0,0,0,2,2,2,0,2,2,2,0,2,2,0,0,2,2,0,2,0,2,0,2,0,2,0,0,0,2,2,2,0,1,1,0,2,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,0,2,0,2,2,0,0,2,2,0,2,0,2,2,2,2,0,0,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,26,39,93,24,77,14,80,83,52,91,93,34,84,34,71,69,88,90,9,41,47,38,55,55,97,48,94,51,98,36,7,89,44,29,22,82,9,40,55,30,48,6,30,71,85,16,56,22,20,34,83,79,18,54,97,37,1,18,41,60,62,10,90,5,66,35,59,62,46,39,95,95,75,30,47,81,92,86,41,23,4,60,17,68,1,38,93,38,63,57,19,91,76,36,17,39,33,15,10,38,55,89,90,80,33,41,68,68,88,42,31,24,50,74,41,58,69,57,13,97,83,92,25,23,27,13,50,92,41,82,23,31,11,53,10,10,49,53,50,73,58,12,84,58,10,95,1,28,76,2,53,86,66,98,20,88,30,39,21,47,31,30,78,28,74,63,90,91,88,78,10,64,52,91,18,65,20,16,90,76,2,22,18,43,90,5,59,62,60,71,41,66,64,39,32,90,10,61,52,71,46,61,18,53,82,80,53,39,70,71,81,48,17,26,14,19,69,16,68,39,39,86,31,34,4,11,81,32,55,54,12,93,34,49,50,2,64,61,44,89,13,45,64,45,87,92,16,81,83,18,4,96,43,88,74,27,16,78,10,12,31,38,28,84,50,28,75,74,39,42,43,41,16,5,76,95,88,49,22,43,13,95,66,68,32,79,66,26,82,43,25,79,10,2,77,22,19,81,4,92,42,54,67,62,18,9,69,69,24,69,87,6,53,56,22,20,98,85,3,79,35,4,32,96,25,69,59,23,14,92,19,34,73,42,44,45,7,85,8,31,55,68,84,59,4,18,65,19,61,37,72,29,46,67,64,40,46,82,8,50,57,8,59,83,47,22,16,1,58,41,93,56,60,17,95,24,63,48,47,89,23,12,37,82,19,9,74,30,15,65,1,86,88,93,75,73,11,80,88,36,49,62,57,59,75,43,91,47,93,98,65,30,90,50,93,81,58,43,84,58,24,33,17,83,48,45,91,60,40,87,75,94,26,95,81,93,62,68,73,71,77,56,89,49,26,56,26,4,26,63,16,64,77,33,16,93,21,68,63,55,15,65,23,14,45,35,22,3,78,50,83,45,96,69,79,7,20,6,75,64,8,7,71,85,16,68,27,50,88,31,34,50,32,83,48,1,35,50,90,10,59,19,80,61,83,34,59,25,7,41,48,56,10,64,23,14,85,70,77,73,91,17,36,60,2,1,77,89,39,84,89,76,55,77,51,24,43,2,31,50,46,50,62,22,48,86,38,19,13,2,96,80,74,82,54,84,49,7,4,1,86,33,50,7,37,51,4,54,37,91,11,12,29,77,78,55,98,15,34,82,7,28,41,16,42,73,44,62,70,61,20,76,24,95,78,40,44,24,25,29,85,83,39,48,5,64,43,81,12,8,84,37,47,80,62,53,32,29,87,7,8,41,1,72,9,38,58,64,31,6,23,15,31,3,53,56,34,35,30,57,75,13,56,36,7,87,88,22,91,60,64,10,45,91,43,83,50,23,79,87,4,80,51,11,3,60,56,86,19,83,76,75,43,44,35,75,25,97,40,20,11,51,31,1,23,89,35,41,68,33,93,9,74,80,81,58,13,13,22,80,54,21,93,19,40,25,46,85,75,62,15,54,90,12,10,31,49,89,51,13,57,92,3,17,28,84,36,90,21,12,86,44,87,66,58,24,83,55,13,91,21,70,91,50,94,77,90,35,6,72,79,95,20,2,45,50,77,15,3,97,73,94,54,12,64,30,9,26,45,84,34,95,57,15,88,33,47,62,69,62,89,29,60,34,47,13,86,66,86,75,5,29,50,19,65,70,81,51,62,43,21,61,87,39,19,49,48,7,23,62,52,2,17,31,54,97,98,83,76,98,4,30,31,56,11,89,7,75,46,13,62,32,70,83,29,23,53,40,90,28,45,64,9,35,52,39,77,71,24,40,69,66,59,98,53,15,57,83,50,65,75,26,1,83,17,73,75,34,72,11,66,18,50,77,8,26,80,61,33,84,12,52,13,7,30,26,61,23,10,88,3,80,80,49,29,40,90,65,25,89,55,42,13,98,23,3,19,46,5,94,5,19,72,63,2,20,36,26,20,4,51,77,93,2,25,86,12,7,56,12,61,85,53,12,15,10,13,13,50,73,34,86,59,94,40,36,9,95,74,55,13,19,71,60,63,74,26,24,10,5,21,86,93,62,62,34,47,85,26,94,60,25,9,93,57,57,97,80,6,80,48,22,11,77,50,9,20,23,21,15,33,49,8,76,94,2,61,88,10,24,56,47,43,48,39,12,52,66,19,68,35,26,46,93,27,51,72,98,58,1,24,5,5,9,51,61,3,42,76,98,83,90,49,94,74,79,73,4,46,55,62,16,19,35,51,19,39,64,87,2,95,65,66,26,81,67,35,54,51,70,10,63,76,51,82,67,48,78,15,19,27,37,24,63,97,55,97,7,49,72,7,76,25,82,84,56,94,47,48,44,91,10,432584";
            var p = new Program(code);
            var arcade = new Arcade(p);
            arcade.GetUntilEndOrInputError();
            Assert.AreEqual(380, arcade.BlockCount());
        }

        [Test]
        public void Puzzle13Part2()
        {
            var code = "1,380,379,385,1008,2823,432584,381,1005,381,12,99,109,2824,1101,0,0,383,1101,0,0,382,20102,1,382,1,20102,1,383,2,21102,1,37,0,1105,1,578,4,382,4,383,204,1,1001,382,1,382,1007,382,42,381,1005,381,22,1001,383,1,383,1007,383,26,381,1005,381,18,1006,385,69,99,104,-1,104,0,4,386,3,384,1007,384,0,381,1005,381,94,107,0,384,381,1005,381,108,1105,1,161,107,1,392,381,1006,381,161,1101,-1,0,384,1105,1,119,1007,392,40,381,1006,381,161,1101,0,1,384,21002,392,1,1,21102,24,1,2,21102,0,1,3,21102,138,1,0,1105,1,549,1,392,384,392,20102,1,392,1,21101,0,24,2,21101,0,3,3,21101,161,0,0,1105,1,549,1101,0,0,384,20001,388,390,1,20101,0,389,2,21101,0,180,0,1106,0,578,1206,1,213,1208,1,2,381,1006,381,205,20001,388,390,1,21002,389,1,2,21101,0,205,0,1106,0,393,1002,390,-1,390,1101,1,0,384,20102,1,388,1,20001,389,391,2,21102,1,228,0,1105,1,578,1206,1,261,1208,1,2,381,1006,381,253,21001,388,0,1,20001,389,391,2,21101,253,0,0,1106,0,393,1002,391,-1,391,1102,1,1,384,1005,384,161,20001,388,390,1,20001,389,391,2,21102,1,279,0,1105,1,578,1206,1,316,1208,1,2,381,1006,381,304,20001,388,390,1,20001,389,391,2,21102,1,304,0,1106,0,393,1002,390,-1,390,1002,391,-1,391,1102,1,1,384,1005,384,161,21001,388,0,1,21002,389,1,2,21101,0,0,3,21101,0,338,0,1106,0,549,1,388,390,388,1,389,391,389,21002,388,1,1,20102,1,389,2,21101,4,0,3,21102,1,365,0,1106,0,549,1007,389,25,381,1005,381,75,104,-1,104,0,104,0,99,0,1,0,0,0,0,0,0,380,19,21,1,1,21,109,3,22102,1,-2,1,21201,-1,0,2,21102,1,0,3,21101,0,414,0,1105,1,549,21201,-2,0,1,21202,-1,1,2,21102,1,429,0,1105,1,601,1202,1,1,435,1,386,0,386,104,-1,104,0,4,386,1001,387,-1,387,1005,387,451,99,109,-3,2105,1,0,109,8,22202,-7,-6,-3,22201,-3,-5,-3,21202,-4,64,-2,2207,-3,-2,381,1005,381,492,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,481,21202,-4,8,-2,2207,-3,-2,381,1005,381,518,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,507,2207,-3,-4,381,1005,381,540,21202,-4,-1,-1,22201,-3,-1,-3,2207,-3,-4,381,1006,381,529,22102,1,-3,-7,109,-8,2105,1,0,109,4,1202,-2,42,566,201,-3,566,566,101,639,566,566,2102,1,-1,0,204,-3,204,-2,204,-1,109,-4,2105,1,0,109,3,1202,-1,42,594,201,-2,594,594,101,639,594,594,20102,1,0,-2,109,-3,2105,1,0,109,3,22102,26,-2,1,22201,1,-1,1,21101,557,0,2,21102,671,1,3,21101,0,1092,4,21101,630,0,0,1105,1,456,21201,1,1731,-2,109,-3,2106,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,2,0,0,2,0,0,0,0,0,2,2,2,0,2,2,2,0,0,2,0,0,0,0,0,2,0,2,0,0,2,2,0,2,2,2,0,0,1,1,0,0,2,2,2,0,0,2,0,2,2,2,2,0,0,2,2,0,2,2,2,2,0,0,0,0,2,0,2,0,2,2,2,2,0,2,0,0,0,0,1,1,0,0,2,2,2,2,0,2,0,2,2,2,0,2,0,0,0,2,0,0,2,2,2,2,2,0,2,0,0,0,2,2,0,0,2,2,2,2,2,0,1,1,0,0,2,2,0,0,0,2,0,2,2,2,2,0,0,0,2,0,0,2,2,2,0,0,2,0,0,0,2,2,2,0,2,0,0,0,2,0,2,0,1,1,0,2,0,0,2,2,2,0,2,2,0,2,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,2,2,0,2,2,0,0,2,2,2,2,2,0,1,1,0,2,0,2,2,2,2,0,2,0,2,0,2,2,0,2,0,2,0,2,2,2,2,0,0,0,2,2,2,2,2,0,0,2,0,0,0,2,0,0,1,1,0,2,0,2,2,2,2,0,2,2,0,2,2,2,2,2,0,2,2,2,2,0,2,2,0,2,0,2,2,2,0,2,2,2,0,2,0,0,0,0,1,1,0,2,0,2,2,2,2,2,2,2,2,0,0,2,0,0,2,2,2,2,2,0,0,0,2,0,2,0,2,2,0,2,2,0,0,0,2,2,2,0,1,1,0,2,0,0,0,0,2,0,0,2,0,2,0,2,0,0,2,2,2,2,2,0,2,0,0,2,0,2,0,2,2,0,0,2,2,0,0,2,0,0,1,1,0,0,2,0,0,0,2,2,0,0,0,0,2,2,0,0,0,2,2,0,2,0,0,2,2,0,2,2,0,0,2,0,2,2,2,0,0,2,2,0,1,1,0,2,2,2,0,0,2,0,2,2,0,0,2,2,2,2,2,0,2,2,0,2,2,2,2,2,0,2,0,0,2,0,2,0,2,0,2,2,2,0,1,1,0,0,2,0,2,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,0,2,2,0,2,0,2,2,2,2,0,0,0,0,2,2,0,2,2,0,1,1,0,0,0,2,0,2,2,2,2,2,2,0,2,2,0,0,0,2,0,2,2,0,2,2,2,2,0,2,0,2,0,0,2,0,0,2,2,2,2,0,1,1,0,0,0,2,2,0,2,2,0,2,2,0,0,2,0,2,0,0,2,0,2,0,0,2,0,0,2,0,2,2,2,0,2,2,2,2,0,0,2,0,1,1,0,0,0,2,2,0,2,2,2,0,2,2,0,0,2,0,0,2,2,2,0,0,0,2,0,0,2,0,2,0,0,2,0,2,2,2,0,0,0,0,1,1,0,0,2,0,2,0,2,0,0,2,2,2,0,2,2,2,2,0,2,2,0,2,2,0,0,0,0,2,0,0,2,2,2,0,0,0,2,2,2,0,1,1,0,2,2,0,2,2,0,0,0,0,0,2,2,2,0,2,2,2,0,2,2,0,0,2,2,0,2,0,2,0,2,0,2,0,0,0,2,2,2,0,1,1,0,2,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,0,2,0,2,2,0,0,2,2,0,2,0,2,2,2,2,0,0,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,26,39,93,24,77,14,80,83,52,91,93,34,84,34,71,69,88,90,9,41,47,38,55,55,97,48,94,51,98,36,7,89,44,29,22,82,9,40,55,30,48,6,30,71,85,16,56,22,20,34,83,79,18,54,97,37,1,18,41,60,62,10,90,5,66,35,59,62,46,39,95,95,75,30,47,81,92,86,41,23,4,60,17,68,1,38,93,38,63,57,19,91,76,36,17,39,33,15,10,38,55,89,90,80,33,41,68,68,88,42,31,24,50,74,41,58,69,57,13,97,83,92,25,23,27,13,50,92,41,82,23,31,11,53,10,10,49,53,50,73,58,12,84,58,10,95,1,28,76,2,53,86,66,98,20,88,30,39,21,47,31,30,78,28,74,63,90,91,88,78,10,64,52,91,18,65,20,16,90,76,2,22,18,43,90,5,59,62,60,71,41,66,64,39,32,90,10,61,52,71,46,61,18,53,82,80,53,39,70,71,81,48,17,26,14,19,69,16,68,39,39,86,31,34,4,11,81,32,55,54,12,93,34,49,50,2,64,61,44,89,13,45,64,45,87,92,16,81,83,18,4,96,43,88,74,27,16,78,10,12,31,38,28,84,50,28,75,74,39,42,43,41,16,5,76,95,88,49,22,43,13,95,66,68,32,79,66,26,82,43,25,79,10,2,77,22,19,81,4,92,42,54,67,62,18,9,69,69,24,69,87,6,53,56,22,20,98,85,3,79,35,4,32,96,25,69,59,23,14,92,19,34,73,42,44,45,7,85,8,31,55,68,84,59,4,18,65,19,61,37,72,29,46,67,64,40,46,82,8,50,57,8,59,83,47,22,16,1,58,41,93,56,60,17,95,24,63,48,47,89,23,12,37,82,19,9,74,30,15,65,1,86,88,93,75,73,11,80,88,36,49,62,57,59,75,43,91,47,93,98,65,30,90,50,93,81,58,43,84,58,24,33,17,83,48,45,91,60,40,87,75,94,26,95,81,93,62,68,73,71,77,56,89,49,26,56,26,4,26,63,16,64,77,33,16,93,21,68,63,55,15,65,23,14,45,35,22,3,78,50,83,45,96,69,79,7,20,6,75,64,8,7,71,85,16,68,27,50,88,31,34,50,32,83,48,1,35,50,90,10,59,19,80,61,83,34,59,25,7,41,48,56,10,64,23,14,85,70,77,73,91,17,36,60,2,1,77,89,39,84,89,76,55,77,51,24,43,2,31,50,46,50,62,22,48,86,38,19,13,2,96,80,74,82,54,84,49,7,4,1,86,33,50,7,37,51,4,54,37,91,11,12,29,77,78,55,98,15,34,82,7,28,41,16,42,73,44,62,70,61,20,76,24,95,78,40,44,24,25,29,85,83,39,48,5,64,43,81,12,8,84,37,47,80,62,53,32,29,87,7,8,41,1,72,9,38,58,64,31,6,23,15,31,3,53,56,34,35,30,57,75,13,56,36,7,87,88,22,91,60,64,10,45,91,43,83,50,23,79,87,4,80,51,11,3,60,56,86,19,83,76,75,43,44,35,75,25,97,40,20,11,51,31,1,23,89,35,41,68,33,93,9,74,80,81,58,13,13,22,80,54,21,93,19,40,25,46,85,75,62,15,54,90,12,10,31,49,89,51,13,57,92,3,17,28,84,36,90,21,12,86,44,87,66,58,24,83,55,13,91,21,70,91,50,94,77,90,35,6,72,79,95,20,2,45,50,77,15,3,97,73,94,54,12,64,30,9,26,45,84,34,95,57,15,88,33,47,62,69,62,89,29,60,34,47,13,86,66,86,75,5,29,50,19,65,70,81,51,62,43,21,61,87,39,19,49,48,7,23,62,52,2,17,31,54,97,98,83,76,98,4,30,31,56,11,89,7,75,46,13,62,32,70,83,29,23,53,40,90,28,45,64,9,35,52,39,77,71,24,40,69,66,59,98,53,15,57,83,50,65,75,26,1,83,17,73,75,34,72,11,66,18,50,77,8,26,80,61,33,84,12,52,13,7,30,26,61,23,10,88,3,80,80,49,29,40,90,65,25,89,55,42,13,98,23,3,19,46,5,94,5,19,72,63,2,20,36,26,20,4,51,77,93,2,25,86,12,7,56,12,61,85,53,12,15,10,13,13,50,73,34,86,59,94,40,36,9,95,74,55,13,19,71,60,63,74,26,24,10,5,21,86,93,62,62,34,47,85,26,94,60,25,9,93,57,57,97,80,6,80,48,22,11,77,50,9,20,23,21,15,33,49,8,76,94,2,61,88,10,24,56,47,43,48,39,12,52,66,19,68,35,26,46,93,27,51,72,98,58,1,24,5,5,9,51,61,3,42,76,98,83,90,49,94,74,79,73,4,46,55,62,16,19,35,51,19,39,64,87,2,95,65,66,26,81,67,35,54,51,70,10,63,76,51,82,67,48,78,15,19,27,37,24,63,97,55,97,7,49,72,7,76,25,82,84,56,94,47,48,44,91,10,432584";

            var p = new Program(code);
            var arcade = new Arcade(p, true);
            arcade.Play();

            Assert.AreEqual(18647, arcade.Score);
        }
    }
}